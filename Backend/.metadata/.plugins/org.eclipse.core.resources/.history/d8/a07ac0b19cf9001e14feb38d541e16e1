package sec.security;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;

import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import sec.payLoad.JwtResponse;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig  {
//	@Autowired
//	UserDetailsServiceImpl userDetailsService;
	@Autowired
	private AuthEntryPointJwt unauthorizedHandler;
	
	@Autowired
	AuthTokenFilter authTokenFilter;
	
	@Bean
	public UserDetailsServiceImpl userDetailsServiceImpl()
	{
		return new UserDetailsServiceImpl();
	}
	
	@Bean
	  public DaoAuthenticationProvider authenticationProvider() {
	      DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
	       
	      authProvider.setUserDetailsService(userDetailsServiceImpl());
	      authProvider.setPasswordEncoder(passwordEncoder());
	   
	      return authProvider;
	  }
	@Bean
	  public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
	    return authConfig.getAuthenticationManager();
	  }
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
//	@Bean
//	  public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
//	    http.csrf(csrf -> csrf.disable())
//	        .exceptionHandling(exception -> exception.authenticationEntryPoint(unauthorizedHandler))
//	        .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
//	        .authorizeHttpRequests(auth -> 
//	          auth.requestMatchers("/api/auth/**").permitAll()
//	              .requestMatchers("/api/user-auth/**").permitAll()
//	              .requestMatchers("/role/**").permitAll()
//	              .anyRequest().authenticated()
//	        );
//	    
//	    http.authenticationProvider(authenticationProvider());
//
//	    http.addFilterBefore(authTokenFilter, UsernamePasswordAuthenticationFilter.class);
//	    
//	    return http.build();
//	  }
	
	 @Bean
	    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	        return http.csrf().disable()
	                .authorizeHttpRequests()
	                .requestMatchers("/api/auth/signin").permitAll()
	                .requestMatchers("/api/auth/signup").permitAll()
	                .and()
	                .authorizeHttpRequests()
	                .requestMatchers("/api/auth/**")
	                .authenticated()
	                .requestMatchers("/api/user-auth/**").permitAll()
	                .requestMatchers("/role/**").authenticated()
	                .and()
	                .sessionManagement()
	                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
	                .and()
	                .authenticationProvider(authenticationProvider())
	                .addFilterBefore(authTokenFilter, UsernamePasswordAuthenticationFilter.class).build();

	    }
}
