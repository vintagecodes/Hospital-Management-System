package com.appoint.service;

import java.io.InvalidClassException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.appoint.exception.CustomException;
import com.appoint.model.Appointment;
import com.appoint.model.Doctor;
import com.appoint.model.Patient;
import com.appoint.repository.AppointRepository;

@Service
public class AppointmentService {
	
	@Autowired
	private AppointRepository appointRepository;
	
	@Autowired
	private SequenceGeneratorService generatorService;
	
	@Autowired
	private RestTemplate restTemplate;
	
	public Appointment createAppointment(String doctorId, String name, Appointment appoint) throws CustomException, InvalidClassException{
		Appointment app = new Appointment();
		try {
			
			Doctor doctor = restTemplate.getForObject("http://localhost:5000/doctor/getById/"+doctorId, Doctor.class);
//			System.out.println("Doctor "+doctor);
			Patient patient = restTemplate.getForObject("http://localhost:5001/patient/getByNameObj/"+name, Patient.class);
//			System.out.println("Patient "+patient);
			if(doctor!=null && patient!=null) {
				app.setAppointId(String.valueOf(generatorService.generateSequence(Appointment.SEQUENCE_NAME)));
				app.setUsername(name);
				app.setDoctor(doctor);
				app.setPatient(patient);
				app.setCause(appoint.getCause());
				app.setStatus(appoint.getStatus());
				app.setPaymentStatus(appoint.getPaymentStatus());
				app.setSchedule(appoint.getSchedule());
				app.setTotalFees(doctor.getFees());
			}
		}catch (Exception e) {
            throw new InvalidClassException("Error creating rental: " + e.getMessage());
        }
		return appointRepository.save(app);
		
	}
	
	public Appointment getAppointmentById(String appointId) throws CustomException{
		Appointment app1 = appointRepository.findByAppointId(appointId);
//		System.out.println("List :"+app1);
		if(app1==null) {
			throw new CustomException("Invalid ID");
		}
		return app1;
		
	}
	
	public List<Appointment> getAppointByUsername(String username) throws CustomException{
		List<Appointment> getU = appointRepository.findByUsername(username);
//		System.out.println("List :"+getU);
		if(getU.isEmpty()) {
			throw new CustomException("Invalid Username");
		}
		return getU;
	}
	
	public Appointment updatePaymentStatus(String appointId, String paymentStatus) throws CustomException{
		Appointment app1 = appointRepository.findByAppointId(appointId);
		app1.setPaymentStatus(paymentStatus);
		return appointRepository.save(app1);
	}

}
