package com.hms.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hms.exception.CustomException;
import com.hms.model.Patient;
import com.hms.repository.PatientRepository;
import com.hms.service.PatientService;

@RestController
@RequestMapping("/patient")
@CrossOrigin(origins = "*", maxAge = 3600)
public class PatientController {
	
	@Autowired
	private PatientService patientService;
	
	@Autowired
	private PatientRepository patientRepository;
	
	@PostMapping("/created")
	public ResponseEntity<Patient> createPatient(@RequestBody Patient patient) throws CustomException {
		try {
			Patient createDoctor = patientService.createPatient(patient);
			return ResponseEntity.ok(createDoctor);
		} catch (CustomException e) {
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/getById/{patientId}")
	public ResponseEntity<List<Patient>> getDoctorDetailsById(@PathVariable String patientId) throws CustomException {
		try {
			List<Patient> getPatient = patientService.getPatientById(patientId);
			return ResponseEntity.ok(getPatient);
		}catch (CustomException e) {
			throw new CustomException("Incorrect Input");
		}
	}
	
	@GetMapping("/getByName/{name}")
	public ResponseEntity<List<Patient>> getDetailsByName(@PathVariable String name) throws Exception {
		List<Patient> getPatient = null;
		try {
			getPatient = patientService.getPatientByName(name);
		}catch (CustomException e) {
			ResponseEntity.badRequest().body(new CustomException("Not Found"));
		}
		return ResponseEntity.ok(getPatient);
	}
	
	@GetMapping("/getByNameObj/{name}")
	public ResponseEntity<Patient> getDetailsByNameObj(@PathVariable String name) throws Exception {
		Patient getPatient = null;
		try {
			getPatient = patientService.getPatientByNameObj(name);
		}catch (CustomException e) {
			ResponseEntity.badRequest().body(new CustomException("Not Found"));
		}
		return ResponseEntity.ok(getPatient);
	}
	
	
	
	@GetMapping("/viewALL")
	public List<Patient> getAllPatient(){
		return patientRepository.findAll();
	}
	

}
